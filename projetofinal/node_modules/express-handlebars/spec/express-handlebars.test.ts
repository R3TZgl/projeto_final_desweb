import * as path from "node:path";
import * as expressHandlebars from "../lib/index";
import type {
	TemplateDelegateObject,
	EngineOptions,
} from "../types";

function fixturePath (filePath = "") {
	return path.resolve(__dirname, "./fixtures", filePath);
}

// allow access to private functions for testing
// https://github.com/microsoft/TypeScript/issues/19335
/* eslint-disable dot-notation, @typescript-eslint/no-empty-function */

describe("express-handlebars", () => {
	test("ExpressHandlebars instance", () => {
		const exphbs = new expressHandlebars.ExpressHandlebars();
		expect(exphbs).toBeDefined();
	});

	test("should nomalize extname", () => {
		const exphbs1 = expressHandlebars.create({ extname: "ext" });
		const exphbs2 = expressHandlebars.create({ extname: ".ext" });
		expect(exphbs1.extname).toBe(".ext");
		expect(exphbs2.extname).toBe(".ext");
	});

	describe("getPartials", () => {
		test("should throw if partialsDir is not correct type", async () => {
			// @ts-expect-error partialsDir is invalid
			const exphbs = expressHandlebars.create({ partialsDir: 1 });
			let error: Error | undefined;
			try {
				await exphbs.getPartials();
			} catch (e) {
				error = e;
			}
			expect(error).toEqual(expect.any(Error));
			expect(error?.message).toBe("A partials dir must be a string or config object");
		});

		test("should return empty object if no partialsDir is defined", async () => {
			const exphbs = expressHandlebars.create();
			const partials = await exphbs.getPartials();
			expect(partials).toEqual({});
		});

		test("should return empty object partialsDir does not exist", async () => {
			const exphbs = expressHandlebars.create({ partialsDir: "does-not-exist" });
			const partials = await exphbs.getPartials();
			expect(partials).toEqual({});
		});

		test("should return partials on string", async () => {
			const exphbs = expressHandlebars.create({ partialsDir: fixturePath